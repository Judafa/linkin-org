linkin-org --- an emacs workflow with simple, fast, reliable links.

* Overview

linkin-org proposes to access your data with reliable links to place your written notes at the center of your workflow.
linkin-org is:
- *reliable*: your links will always work.
  It takes a bit of [[#how-reliable-are-the-links-exactly][discipline]]; also, you should not be afraid of seeing ids everywhere.
  Give it a try! It's nothing habit cannot handle.
- *fully distributed*: rename, move, modify your files from literally anywhere without risk.
- *simple*: 3 main commands is all you need.


linkin-org turns your notes into precise, reliable access points towards your data.
Create, paste and follow a link to access a file, a precise line in a text file or precise words in a pdf.
The links are fast and easy to create; most importantly, the links are *reliable* and can robustly support a whole link-based workflow.

# By design, *linkin-org does not interfere with other types of workflows*: if you want to organize your files with another method in parallel (directory hierarchy or good file-naming for instance), you can, linkin-org was built to keep working seamlessly as your files are renamed and moved around.

linkin-org suggests a simple, blazingly fast workflow to store and retrieve your data: store the data (~linkin-org-store~), paste the link, retrieve the data (~linkin-org-follow~).
An id system makes sure that your links will always work even if you move, rename or modify the linked data.
Concretely, a file that you can reliably access via a link has an id in its name, like:
#+begin_src example
20250425T155433--filename.txt
#+end_src
and a line that you can reliably access via a link (here with a python syntax) looks like:
#+begin_src python
# [id:20250425T160020] link gets you there
#+end_src
Thanks to the ids, your links keep working as you rename your files (do not modify or delete the id in the name!), move your files around, or modify the content of your files (do not modify or delete the ids in there!).

* Everything with 3 Commands

linkin-org provides three main commands:
- ~linkin-org-store~ stores what you have at point so that links towards it become *reliable*.
  It works on a file (in a dired buffer), a line in an editable file (org, markdown, python, whatever), a mail attachment (in mu4e).
  It directly copies the link in your clipboard (a.k.a kill-ring) so you can paste it right away.
  It adds an id to your data (changing your file name or the current editable line) so links towards it become reliable.

- ~linkin-org-get~ copies a link towards what you have at point in your clipboard; does not modify your data.
  This works on a file (in dired), a line in an editable file, on selected words in a pdf (in [[https://github.com/vedang/pdf-tools][pdf-tools]]).
  The link may not be reliable; it will be reliable if you called ~linkin-org-store~ beforehand on the data.

- ~linkin-org-follow~ opens the link at point.
  If the known path towards the data is no valid anymore, uses ids to retrieve it.



# * Meet linkin-org

# I find it easier to retrieve information with context.
# Need that train ticket for your travel in Spain? Some people will browse their mails, others will look into their "Tickets" folder, others will search their files for keywords hoping they used to name the ticket file right.
# For my part, I search for "sp tra" through my org notes, go to the note "spain travel", and from there I follow the ticket link that I pasted there some time ago.
# It took me between 1 and 2 seconds; Most importantly, I could do the whole storing-retrieving process without mental overhead.
# That's because it's so easy to retrieve information using context: everything that relates to my travel is stored in the corresponding note.
# # If the information relates to more than one context, just paste the link multiple times in each corresponding note ... I decently cannot list all the advantages here for brevity!



* Typical Workflow Samples

*** Just downloaded some file?
Put your cursor on the file in dired and store it (~linkin-org-store~) to move the file in your store directory (whatever the variable ~linkin-org-store-directory~ equals to).
By doing this, you copied a link: paste it in a .org file, following the link (~linkin-org-follow~) retrieves your file.
Also while storing the file, linkin-org added an id at the beginning of your file name: your link will still work if you rename or move the file around.

*** Just wrote something you'd like to go back to later?
Go one line above and store the current line (~linkin-org-store~) to insert an inline id.
By doing this, you just copied a link: paste it in a .org file, following the link (~linkin-org-follow~) goes back exactly where you were.
That link will always get you exactly at the right location.

*** Reading something interesting in a pdf?
Select the text with your mouse and get a link towards the pdf location (~linkin-org-get~, works with the emacs package [[https://github.com/vedang/pdf-tools][pdf-tools]]).
Following the copied link (~linkin-org-follow~) gets you to the right page and highlight the words you were reading.
If the pdf file has an id then your link will always work: perfect for fast, reliable reading notes.

*** And more
Easily define new link types with custom actions and take advantage of linkin-org's reliable path resolving (for that, just add your link type inside the ~linkin-org-link-types-to-check-for-id~ list).
Three other link types are already builtin: the pdf link type (that we already saw above), the video link type stores and replays precise moments of a videos (youtube or stored locally, works with [[https://github.com/mpv-player/mpv][mpv]]), the music link type launchs musics with links (you can easily turn your org notes into playlists, works with [[https://github.com/MusicPlayerDaemon/MPD][mpd]]).
Even more: you can use the links to automate some actions: to turn some notes into a web browser session manager, to quickly save selected text or save elfeed entries (see the last section for examples).


* Installing linkin-org
with straight
#+begin_src emacs-lisp
(use-package linkin-org
  :straight (linkin-org
	     :type git
	     :host github
	     :repo "Judafa/linkin-org")

  :config
  ;; set this to the directory you want to store your things into
  (setq linkin-org-store-directory "~/")
  ;; set this to the list of directories that are checked when a link is broken
  ;; directories are checked in order; put the light ones first
  (setq linkin-org-search-directories-to-resolve-broken-links (list (expand-file-name "~/")))


  ;; workflow tips (warning: I'm an evil user, this also uses the general.el package)
  ;; (define-key global-map (kbd "C-l") 'linkin-org-follow)
  ;; (nvmap :keymaps 'override :prefix "SPC"
  ;;   "f"   '(linkin-org-store :which-key "Store the thing at point.")
  ;;   "y"   '(linkin-org-get :which-key "Yank a link towards the thing at point.")
  ;;   )
  ;; (define-key global-map (kbd "C-n") 'org-next-link)
  ;; (define-key global-map (kbd "C-p") 'org-previous-link)

  ;; worflow tips (for (normal?) non-evil users)
  ;; (define-key global-map (kbd "C-c l") 'linkin-org-follow)
  ;; (define-key global-map (kbd "C-c f") 'linkin-org-store)
  ;; (define-key global-map (kbd "C-c y") 'linkin-org-get)
  ;; (define-key global-map (kbd "C-c C-n") 'org-next-link)
  ;; (define-key global-map (kbd "C-c C-p") 'org-previous-link)
)
#+end_src


* Dependencies
linkin-org has no dependencies and works out of the box.
It is however recommended to have [[https://github.com/sharkdp/fd][fd]] installed for faster link recovery.

* How Reliable are the Links Exactly?

There are *three golden rules*.
If you respect them, your links will always work.
1. *Do not change or remove the ids.*
   An id in a file name or a directory name looks like 20250425T155433, an inline id inside a file content looks like id:20250425T160020.
   Ids are what enable linkin-org to reliably retrieve your data.
   So tampering with the ids breaks your links --- the links are really broken, not just unreliable, as you just changed the path recorded in the links without id backup.
2. *First attach an id to the data, then create a link*.
   The reverse order will break your links
   Nevertheless, you can create links without any ids involved (use ~linkin-org-get~ on the data).
   But if you later decide to attach an id to the data, all your previous links towards the data will be broken.
3. *Keep your data in sub-directories of* ~linkin-org-search-directories-to-resolve-broken-links~.
   linkin-org recursively searches throughout those directories to find your data in last resort.
   No link is broken if the linked data has an id and lies inside those directories.




And now, here are the operations that *always preserve your links*:
- If a file or a directory has an id attached then it is always safe to rename it, without changing the id part of course.
- It is always safe to modify the content of a file as long as no inline id is changed or modified.
- If a file or a directory has an id attached then it is always safe to move it into a subdirectory of one of the directories listed in the variable ~linkin-org-search-directories-to-resolve-broken-links~.
  # In case you cannot retrieve a file, you can add your entire home directory to that variable (the default, you may change it to more fine-grained directories for faster link recovery).
  # As a particular case, if your data is already in such a subfolder then it is always safe to move the data one folder deeper.

Note: We say that an operation on a data is "safe" if any non-broken link toward the data are still non-broken after the operation was applied to the data.


* A Few Tips
Here are tips that I personally apply, this is a matter of preference.
- Bind ~org-next-link~ and ~org-previous-link~ to comfortable keys.
  When you start to have many links, it gives the not unsatisfying sensation that you merged org with dired.
  Here are my bindings (for an evil user):
  #+begin_src emacs-lisp
(nvmap :keymaps 'override
  "C-n"   '(org-next-link :which-key "jump to the next org link")
  "C-p"   '(org-previous-link :which-key "jump to the previous org link")
  "C-l"   '(linkin-org-follow :which-key "follow the link at point, using ids to resolve a broken link.")
  )
  #+end_src
- Attach your ids at the right-end of the paths in your file system, best directly in the file name.
  Try not to over-engineer with ids everywhere along the file paths.
  Sometimes, you dont want to attach ids directly to the files (e.g. a file in a git repository or a latex document); then, attach the id to the folder that contains it.
- Place the most relevant link at the top of the note.
  It can be a link towards some data you access a lot in the context of the note.
  It can also be a link toward a precise place of the note itself --- for instance, my reading notes always start with a link that takes me to the end of the note; I then go one line up and follow the pdf link I pasted there last time I stopped reading to go back where I was.
  With this, your fingers quickly learn the automation "go to the note -> org-next-line -> linkin-org-follow" to access a data quickly.


* Code Examples
** Save selected text
This code saves some text ~text~ at the location where ~link~ points to.
#+begin_src emacs-lisp
(defun my-store-some-text (text link)
  (linkin-org-follow-link-and-do-function link
                                          (lambda ()
                                            ;; go to the end of the current line
                                            (end-of-line)
                                            ;; insert a line break
                                            (insert "\n")
                                            ;; create a section labeled with the current date
                                            (insert (format "** %s" (format-time-string "%Y-%m-%d %H:%M:%S saved text" (current-time))))
                                            (insert "\n")
                                            ;; insert the text
                                            (insert text)
                                            )
                                          )
  )
#+end_src

You should now redefine ~linkin-org-store~ as follows.
Replace <put your link here> by a link towards the location where you want to save the text.
To obtain such a link, go at the place where you want to store your saved texts and run ~linkin-org-store~.
#+begin_src emacs-lisp
(defun linkin-org-store ()
  "Store what is under point and kill a link to it"
  (interactive)
  (let*
      ((mode (symbol-name major-mode)))
    (cond
     ;; If text is selected
     ((region-active-p)
      (progn
       (my-store-some-text
        (buffer-substring (region-beginning) (region-end))
        "<put your link there>"
        )
       ;; unselect the region
       (deactivate-mark)
       )
      )
     ;; If in a dired buffer
     ((string= mode "dired-mode")
      (linkin-org-store-file t)
      )
     ;; If in mu4e
     ((string= mode "mu4e-view-mode")
      (my/sauve-piece-jointe-dans-fourre-tout)
      )
     ;; If in an editable buffer
     ((not buffer-read-only)
      (linkin-org-store-inline-id)
      )
     )
    )
  )
#+end_src

** Save an elfeed entry
This code saves the url and title of the elfeed entry at point at a location where ~link~ points towards.
#+begin_src emacs-lisp
(defun my-save-elfeed-entry (link)
  ;; save the elfeed entry under point
  (let (
	(buffer (current-buffer))
	(entries (elfeed-search-selected))
	)
    (cl-loop for entry in entries
             do (let*
		            (
		             (title (elfeed-entry-title entry))
		             (url (elfeed-entry-link entry))
		             )
                  (linkin-org-follow-link-and-do-function link
                                                          (lambda ()
                                                            (end-of-line)
		                                                    ;; Insert header
		                                                    (insert (concat "\n" "** " title))
		                                                    ;; add today's date as a header property
		                                                    (org-set-property "DATE" (format-time-string "[%Y-%m-%d %a %H:%M]"))
		                                                    ;; Go to the end of the header's properties
		                                                    (org-end-of-meta-data)
		                                                    ;; insert the url
		                                                    (insert url)
		                                                    (insert "\n")
                                                            )
                                                          )

		          )
	         )
    )
  )
#+end_src


You should redefine ~linkin-org-store~ as follows.
Replace <put your link here> by a link towards the location where you want to save the text.
To obtain such a link, go at the place where you want to store your saved texts and run ~linkin-org-store~.
#+begin_src emacs-lisp
;; If in elfeed
(defun linkin-org-store ()
  "Store what is under point and kill a link to it"
  (interactive)
  (let*
      ((mode (symbol-name major-mode)))
    (cond
     ;; If text is selected
     ((region-active-p)
      (progn
       (my-store-some-text
        "<put your link there>"
        (buffer-substring (region-beginning) (region-end))
        )
       ;; unselect the region
       (deactivate-mark)
       )
      )
     ;; If in a dired buffer
     ((string= mode "dired-mode")
      (linkin-org-store-file t)
      )
     ;; If in mu4e
     ((string= mode "mu4e-view-mode")
      (my/sauve-piece-jointe-dans-fourre-tout)
      )
     ;; If in an editable buffer
     ((not buffer-read-only)
      (linkin-org-store-inline-id)
      )
     )
    )
  )
#+end_src

