
linkin-org --- an emacs workflow with simple, fast, reliable links.

* Quick Overview
linkin-org provides three commands:
- ~linkin-org-store~
- ~linkin-org-get~
- ~linkin-org-follow~


~linkin-org-store~ stores what you have at point so that links towards it become *reliable*.
It works on a file (in a dired buffer), a line in an editable file (org, markdown, python, whatever), a mail attachment (in mu4e).
It directly copies the link in your clipboard (a.k.a kill-ring) so you can paste it right away.
The link is reliable thanks to an automatic id system: rename, move or modify the file, the link still works.

~linkin-org-get~ copies a link towards what you have at point in your clipboard; does not modify your data.
This works on a file (in dired), a line in an editable file, on selected words in a pdf (in [[https://github.com/vedang/pdf-tools][pdf-tools]]).
The link may not be reliable; it will be reliable if you called ~linkin-org-store~ beforehand on the data.

~linkin-org-follow~ opens the link at point.
If the known path towards the data is no valid anymore, uses ids to retrieve it.





* Meet linkin-org

I find it easier to retrieve information with context.
Need that train ticket for your travel in Spain? Some people will browse their mails, others will look into their "Tickets" folder, others will search their files for keywords hoping they used to name the ticket file right.
For my part, I search for "sp tra" through my org notes, go to the note "spain travel", and from there I follow the ticket link that I pasted there some time ago.
It took me between 1 and 2 seconds; Most importantly, I could do the whole storing-retrieving process without mental overhead.
That's because it's so easy to retrieve information using context: everything that relates to my travel is stored in the corresponding note.
If the information relates to more than one context, just paste the link multiple times in each corresponding note ... I decently cannot list all the advantages here for brevity!


linkin-org proposes to *easily store precise locations with reliable links*, making your written notes the center of your workflow.
However, *by design, linkin-org does not interfere with other types of workflows*: if you want to organize your files with another method in parallel (using directory hierarchy or file-naming for instance), you can, linkin-org was built to keep working seamlessly as your files are renamed and moved around.


Here are some sample workflow examples with linkin-org.

*** Just downloaded some file?
Put your cursor on the file in dired and store it (~linkin-org-store~) to move the file in your store directory (whatever the variable ~linkin-org-store-directory~ equals to).
By doing this, you copied a link: paste it in a .org file, following the link (~linkin-org-follow~) retrieves your file.
Also while storing the file, linkin-org added an id at the beginning of your file name: your link will still work if you rename or move the file around.

*** Just wrote something you'd like to go back to later?
Go one line above and store the current line (~linkin-org-store~) to insert an inline id.
By doing this, you just copied a link: paste it in a .org file, following the link (~linkin-org-follow~) goes back exactly where you were.
That link will always get you exactly at the right location.

*** Reading something interesting in a pdf?
Select the text with your mouse and get a link towards the pdf location (~linkin-org-get~, works with the emacs package [[https://github.com/vedang/pdf-tools][pdf-tools]]).
Following the copied link (~linkin-org-follow~) gets you to the right page and highlight the words you were reading.
If the pdf file has an id then your link will always work: perfect for fast, reliable reading notes.

*** And more
Easily define new link types with custom actions and take advantage of linkin-org's reliable path resolving (just add your link type inside the ~linkin-org-link-types-to-check-for-id~ list).
Tow link types are already builtin: the video link type stores and replays precise moments of a videos (youtube or stored locally, works with [[https://github.com/mpv-player/mpv][mpv]]), the music link type launchs musics with links (you can easily turn your org notes into playlists, works with [[https://github.com/MusicPlayerDaemon/MPD][mpd]]).
Even more: you can use the links to automate some actions: to turn some notes into a web browser session manager, to quickly save selected text or save elfeed entries (see the last section for examples).


* Installing linkin-org
with straight
#+begin_src emacs-lisp
(use-package linkin-org
  :straight (linkin-org
	     :type git
	     :host github
	     :repo "Judafa/linkin-org")

  :config
  ;; set this to the directory you want to store your things into
  (setq linkin-org-store-directory "~/")
  ;; set this to the list of directories that are checked when a link is broken
  ;; directories are checked in order; put the light ones first
  (setq linkin-org-search-directories-to-resolve-broken-links (list (expand-file-name "~/")))


  ;; workflow tips (warning: I'm an evil user, this also uses the general.el package)
  ;; (define-key global-map (kbd "C-l") 'linkin-org-follow)
  ;; (nvmap :keymaps 'override :prefix "SPC"
  ;;   "f"   '(linkin-org-store :which-key "Store the thing at point.")
  ;;   "y"   '(linkin-org-get :which-key "Yank a link towards the thing at point.")
  ;;   )
  ;; (define-key global-map (kbd "C-n") 'org-next-link)
  ;; (define-key global-map (kbd "C-p") 'org-previous-link)

  ;; worflow tips (for (normal?) non-evil users)
  ;; (define-key global-map (kbd "C-c l") 'linkin-org-follow)
  ;; (define-key global-map (kbd "C-c f") 'linkin-org-store)
  ;; (define-key global-map (kbd "C-c y") 'linkin-org-get)
  ;; (define-key global-map (kbd "C-c C-n") 'org-next-link)
  ;; (define-key global-map (kbd "C-c C-p") 'org-previous-link)
)
#+end_src


* Dependencies
linkin-org has no dependencies and works out of the box.
It is however recommended to have [[https://github.com/sharkdp/fd][fd]] installed for faster link recovery.

* A few code examples
** Save selected text
This code saves some text ~text~ at the location where ~link~ points to.
#+begin_src emacs-lisp
(defun my-store-some-text (text link)
  (linkin-org-follow-link-and-do-function link
                                          (lambda ()
                                            ;; go to the end of the current line
                                            (end-of-line)
                                            ;; insert a line break
                                            (insert "\n")
                                            ;; create a section labeled with the current date
                                            (insert (format "** %s" (format-time-string "%Y-%m-%d %H:%M:%S saved text" (current-time))))
                                            (insert "\n")
                                            ;; insert the text
                                            (insert text)
                                            )
                                          )
  )
#+end_src

You should now redefine ~linkin-org-store~ as follows.
Replace <put your link here> by a link towards the location where you want to save the text.
To obtain such a link, go at the place where you want to store your saved texts and run ~linkin-org-store~.
#+begin_src emacs-lisp
(defun linkin-org-store ()
  "Store what is under point and kill a link to it"
  (interactive)
  (let*
      ((mode (symbol-name major-mode)))
    (cond
     ;; If text is selected
     ((region-active-p)
      (progn
       (my-store-some-text
        (buffer-substring (region-beginning) (region-end))
        "<put your link there>"
        )
       ;; unselect the region
       (deactivate-mark)
       )
      )
     ;; If in a dired buffer
     ((string= mode "dired-mode")
      (linkin-org-store-file t)
      )
     ;; If in mu4e
     ((string= mode "mu4e-view-mode")
      (my/sauve-piece-jointe-dans-fourre-tout)
      )
     ;; If in an editable buffer
     ((not buffer-read-only)
      (linkin-org-store-inline-id)
      )
     )
    )
  )
#+end_src

** Save an elfeed entry
This code saves the url and title of the elfeed entry at point at a location where ~link~ points towards.
#+begin_src emacs-lisp
(defun my-save-elfeed-entry (link)
  ;; save the elfeed entry under point
  (let (
	(buffer (current-buffer))
	(entries (elfeed-search-selected))
	)
    (cl-loop for entry in entries
             do (let*
		            (
		             (title (elfeed-entry-title entry))
		             (url (elfeed-entry-link entry))
		             )
                  (linkin-org-follow-link-and-do-function link
                                                          (lambda ()
                                                            (end-of-line)
		                                                    ;; Insert header
		                                                    (insert (concat "\n" "** " title))
		                                                    ;; add today's date as a header property
		                                                    (org-set-property "DATE" (format-time-string "[%Y-%m-%d %a %H:%M]"))
		                                                    ;; Go to the end of the header's properties
		                                                    (org-end-of-meta-data)
		                                                    ;; insert the url
		                                                    (insert url)
		                                                    (insert "\n")
                                                            )
                                                          )

		          )
	         )
    )
  )
#+end_src


You should redefine ~linkin-org-store~ as follows.
Replace <put your link here> by a link towards the location where you want to save the text.
To obtain such a link, go at the place where you want to store your saved texts and run ~linkin-org-store~.
#+begin_src emacs-lisp
;; If in elfeed
(defun linkin-org-store ()
  "Store what is under point and kill a link to it"
  (interactive)
  (let*
      ((mode (symbol-name major-mode)))
    (cond
     ;; If text is selected
     ((region-active-p)
      (progn
       (my-store-some-text
        "<put your link there>"
        (buffer-substring (region-beginning) (region-end))
        )
       ;; unselect the region
       (deactivate-mark)
       )
      )
     ;; If in a dired buffer
     ((string= mode "dired-mode")
      (linkin-org-store-file t)
      )
     ;; If in mu4e
     ((string= mode "mu4e-view-mode")
      (my/sauve-piece-jointe-dans-fourre-tout)
      )
     ;; If in an editable buffer
     ((not buffer-read-only)
      (linkin-org-store-inline-id)
      )
     )
    )
  )
#+end_src

